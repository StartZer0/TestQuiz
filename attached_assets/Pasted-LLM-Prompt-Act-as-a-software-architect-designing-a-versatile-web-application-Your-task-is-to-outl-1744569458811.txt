LLM Prompt:

Act as a software architect designing a versatile web application. Your task is to outline the concept, features, workflow, and technical considerations for a web application that combines two core functionalities:

Document-to-Quiz Conversion: Inspired by 'Form Builder Plus', allowing users to upload documents and convert them into a structured quiz format (JSON).
Quiz Taking & Sharing Platform: Allowing users to take quizzes generated by the application or uploaded directly, provide immediate feedback, and share quizzes with others via links.
Crucially, this must be designed as a standalone web application, NOT a Google Workspace Add-on. Users will interact with it via a standard web browser.

Core Capabilities:

A. Document Processing & Quiz Creation:

Input:
Allow users to upload documents (initially focus on .docx, consider .pdf).
Document Processing & Question Extraction:
Implement a robust backend process to scan the uploaded document.
Identify potential questions and their corresponding answer choices (target Multiple Choice and potentially Short Answer types).
Detect and extract embedded images, associating them correctly with questions or as answer options.
Enhanced Correct Answer Detection: Recognize formatting cues indicating the correct answer within a multiple-choice list:
Bold text.
A + sign immediately preceding the option text (e.g., + B) Correct Answer). Handle potential leading whitespace.
Handle variations in formatting (e.g., answers on the same line).
User Interface (UI) & Interaction - Preview and Edit:
After scanning, present extracted items (questions, titles, etc.) in an interactive preview interface (e.g., list of cards).
Provide editing controls: Adjust Type, Edit Text, Merge Items (critical for text+image questions), Set as Required, Manage/Select Correct Answers, Assign Points (optional), Delete Items, Reorder Items (e.g., drag-and-drop).
Output Generation:
Allow users to set a title for the quiz.
Generate the primary output as a structured JSON file representing the quiz (details below).
B. Quiz Taking & Sharing:

Quiz Setup:
From Conversion: After editing a scanned document, the user can proceed directly to take/share the generated quiz.
From Upload: Allow users to upload a pre-existing JSON file (conforming to the application's defined format) to set up a quiz directly.
Test Taking Interface & Experience:
Present questions one at a time or in a scrollable list, based on the JSON data.
Display question text and any associated images clearly.
Render multiple-choice options (text and/or images).
User selects an answer and submits it.
Immediate Feedback: After submitting an answer for a question, immediately indicate if the choice was correct or incorrect, and reveal the correct answer.
Navigate between questions (Next/Previous, or scroll).
Final Results: Upon completion, display a summary page showing which questions were answered correctly and incorrectly, potentially with a total score.
Quiz Sharing:
Allow a user who has created or uploaded a quiz (JSON) to generate a unique, shareable link.
This requires persistently storing the quiz JSON associated with the unique link identifier.
Users accessing the application via such a link are taken directly to the start of that specific quiz.
C. System-Wide Considerations:

Scalability:
The entire system (document processing, editing interface, test-taking engine, sharing mechanism) must be designed to handle a large number of questions per quiz (target 2000+ questions). Consider performance implications for:
Backend processing time for large documents.
Frontend rendering/performance in the editor (e.g., pagination or virtual scrolling for the item list).
Efficient loading and rendering of questions during the test-taking experience.
Database performance for storing and retrieving potentially large JSON quiz structures for shared links.
Technology Considerations (Suggest potential stack):
Backend: Python (Flask/Django) with python-docx, PyPDF2/PyMuPDF, potentially OCR (pytesseract). Needs a database (e.g., PostgreSQL, MySQL, or NoSQL like MongoDB) for persistent storage of shared quiz data linked to unique IDs.
Frontend: Modern JavaScript framework (React, Vue, Angular) essential for the dynamic editing and test-taking interfaces. Efficient state management libraries.
Storage: Temporary storage for uploads (cloud or local filesystem), persistent database for shared quiz JSONs and link mappings.
Deliverable:

Provide a detailed description of this enhanced web application, outlining:

Dual User Workflows:
Path 1: Upload Doc -> Scan -> Edit -> Generate JSON -> Optionally Share / Take Test.
Path 2: Upload JSON -> Share / Take Test.
Path 3: Access Shared Link -> Take Test.
Key UI Components: Include specifics for both the Editor Interface (upload, preview cards, merge, etc.) and the Test Taker Interface (question display, options, submit button, immediate feedback area, results page, share button).
Core Backend Logic: Detail challenges and approaches for parsing (including + detection), image handling, state management during editing, storing/retrieving shared quizzes via links, processing answers, and calculating results.
Proposed JSON Structure: Provide a clear example, ensuring it contains all necessary fields for both quiz definition and test taking (question text, type, options, correct answer identifier, images, required status, points).
Scalability Strategies: Briefly mention how to address handling 2000+ questions (e.g., backend optimization, frontend pagination/lazy-loading).
Sharing Mechanism: Explain how unique links are generated, associated with stored JSON data, and resolved when accessed.
Emphasize how this design integrates the original document conversion idea with a robust quiz-taking and sharing platform, addressing scalability and enhanced input detection.